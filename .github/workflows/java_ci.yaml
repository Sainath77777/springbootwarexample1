name: CI Pipeline
 
on:
  push:
    branches:
      - main
  pull_request:
 
jobs:
  maven-build:
    runs-on: ubuntu-latest
 
    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3
 
    # Step 2: Set up JDK 11
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '11'
 
    # Step 3: Maven Build and Unit Tests
    - name: Build with Maven and run unit tests
      run: mvn clean install
 
    # Step 4: Functional Testing
    - name: Run Functional Tests
      run: mvn test -DtestType=functional
 
    # Step 5: Performance Testing
    - name: Run Performance Tests
      run: mvn test -DtestType=performance
 
  sonar-scan:
    runs-on: ubuntu-latest
    needs: maven-build
 
    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3
 
    # Step 2: Set up JDK 11
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '11'
 
    # Step 3: Run SonarQube scan
    - name: SonarQube Scan
      run: mvn sonar:sonar -Dsonar.projectKey=Sainath77777_springbootwarexample1 -Dsonar.host.url=https://sonarcloud.io -Dsonar.login= 1d9ca335a8e83a2acbe7acc174eebcbf70107e16
 
  docker-build:
    runs-on: ubuntu-latest
    needs: sonar-scan
 
    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3
 
    # Step 2: Build Docker Image
    - name: Build Docker image
      run: |
        docker build -t javaapp src/main/Dockerfile
        docker tag javaapp sainath2127/javaapp:latest
 
    # Step 3: Log in to DockerHub
    - name: Login to DockerHub
      run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
 
    # Step 4: Push Docker Image to DockerHub
    - name: Push Docker image to DockerHub
      run: docker push <your_dockerhub_username>/<your_docker_image>:latest
 
  nexus-push:
    runs-on: ubuntu-latest
    needs: docker-build
 
    steps:
    # Step 1: Push artifact to Nexus
    - name: Push Maven artifact to Nexus
      run: mvn deploy -DaltDeploymentRepository=nexus-repo::default::http://<nexus_url>/repository/maven-releases/
 
  jfrog-push:
    runs-on: ubuntu-latest
    needs: nexus-push
 
    steps:
    # Step 1: Upload artifact to JFrog Artifactory
    - name: Upload artifact to JFrog
      run: |
        curl -u ${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_TOKEN }} \
          -T target/<your_artifact>.jar "http://<jfrog_url>/artifactory/<repo>/<your_artifact>.jar"
